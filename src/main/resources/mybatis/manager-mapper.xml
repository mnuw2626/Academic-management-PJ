<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.academic.mapper.ManagerMapper">
    <resultMap id="all_student_with_tuition_map" type="com.academic.dto.StdDTO" autoMapping="true">
        <result property="stdNo" column="std_no" />
        <result property="name" column="name" />
        <result property="grade" column="grade" />
        <result property="semester" column="semester" />
        <association property="tuitionDTO" javaType="com.academic.dto.TuitionDTO">
            <result property="check" column="check" />
            <result property="amount" column="amount" />
        </association>
    </resultMap>

    <resultMap id="all_leave_with_std_map" type="com.academic.dto.LeaveDTO" autoMapping="true">
        <result property="stdNo" column="std_no" />
        <result property="status" column="status" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
        <result property="applicationDate" column="application_date" />
        <result property="reason" column="reason" />
        <association property="stdDTO" javaType="com.academic.dto.StdDTO">
            <result property="stdNo" column="std_no" />
            <result property="name" column="name" />
            <result property="grade" column="grade" />
            <result property="semester" column="semester" />
        </association>
    </resultMap>

    <!--    전체 학생 조회-->
    <select id="select_all_std" resultType="com.academic.dto.StdDTO">
        SELECT * FROM `student`
    </select>

    <!--    개개인 학생 조회-->
    <select id="select_std" resultType="com.academic.dto.StdDTO">
        SELECT `college_id`, `std_no`, `name`, `dept_id`, `grade`, `semester` FROM `student`
        <where>
            <if test="collegeId != null and collegeId != ''">
                college_id = #{collegeId}
            </if>
            <if test="deptId != null and deptId != ''">
                AND dept_id = #{deptId}
            </if>
            <if test="grade != null and grade != ''">
                AND grade = #{grade}
            </if>
            <if test="semester != null and semester != ''">
                AND semester = #{semester}
            </if>
            <if test="name != null and name != ''">
                AND name = #{name}
            </if>
            <if test="stdNo != null and stdNo != ''">
                AND std_no = #{stdNo}
            </if>
        </where>
    </select>

    <insert id="insert_std">
        insert into `student` (`std_no`, `name`, `college_id`, `dept_id`, `grade`, `semester`)
        values(#{stdNo}, #{name}, #{collegeId}, #{deptId}, #{grade}, #{semester})
    </insert>

    <select id="select_colleges" resultType="com.academic.dto.CollegeDTO">
        SELECT * FROM `college`
    </select>

    <select id="select_dept" resultType="com.academic.dto.DepartmentDTO">
        SELECT * FROM `department`
        WHERE college_id = #{collegeId}
        ORDER BY `name`
    </select>

    <!--    장학금 관련 -->
    <select id="select_std_scholarship" resultType="com.academic.dto.TuitionDTO">
        SELECT S.std_no, C.amount
        FROM `student` AS S
                 INNER JOIN `college_tuit` AS C
                 ON S.college_id = C.college_id
                 LEFT JOIN `stat` AS ST
                 ON S.std_no = ST.std_no
        WHERE ST.status IS NULL OR ST.status != '휴학'
    </select>

    <insert id="insert_scholarship">
        INSERT INTO `tuition` (`std_no`, `check`, `amount`)
        VALUES
        <foreach collection="tuitionDTOS" item="item" separator=",">
            (#{item.stdNo}, #{item.check}, #{item.amount})
        </foreach>
        ON DUPLICATE KEY UPDATE
        `check` = VALUES(`check`),
        `amount` = VALUES(`amount`)
    </insert>

    <select id="select_all_std_tuition" resultMap="all_student_with_tuition_map">
        SELECT S.std_no, S.name, S.grade, S.semester, T.amount, T.check
        FROM `student` AS S
                 INNER JOIN `tuition` AS T
                 ON S.std_no = T.std_no
    </select>

    <!-- 모든 휴학 신청 정보를 가져오기 -->
    <select id="select_all_std_leaves" resultType="com.academic.dto.LeaveDTO">
        SELECT * FROM `stat`
        WHERE status = '처리중' OR status = '휴학'
    </select>

    <!-- 모든 복학 신청 정보를 가져오기 -->
    <select id="select_all_std_returns" resultType="com.academic.dto.LeaveDTO">
        SELECT * FROM `stat`
        WHERE status = '복학 처리중' OR status = '복학'
    </select>

    <!-- 휴학 상태 업데이트 -->
    <update id="update_leave_std_status">
        UPDATE `stat`
        SET status = '휴학', leave_count = #{leaveCount}
        WHERE std_no = #{stdNo}
    </update>

    <!-- 복학 상태 업데이트 -->
    <update id="update_return_std_status">
        UPDATE `stat`
        SET status = '복학'
        WHERE std_no = #{stdNo}
    </update>

    <!-- 휴학 신청 정보 삭제 -->
    <delete id="delete_leave_application">
        DELETE FROM `stat`
        WHERE std_no = #{stdNo} AND reason != '복학신청'
    </delete>

    <!-- 공지사항 가져오기 -->
    <select id="select_notices" resultType="com.academic.dto.NoticeDTO">
        SELECT * FROM `notice`
        <where>
            <if test="searchType == 'title'">
                <if test="title != null and title != ''">
                    title LIKE CONCAT('%', #{title}, '%')
                </if>
            </if>
            <if test="searchType == 'title_and_content'">
                <if test="title != null and title != ''">
                    (title LIKE CONCAT('%', #{title}, '%') OR content LIKE CONCAT('%', #{title}, '%'))
                </if>
            </if>
        </where>
        ORDER BY created_date DESC
    </select>

    <!-- 공지사항 하나 가져오기 -->
    <select id="select_notice" resultType="com.academic.dto.NoticeDTO">
        SELECT * FROM `notice`
        WHERE no = #{no}
    </select>

    <!-- 모든 공지사항 갯수 가져오기  -->
    <select id="count" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM `notice`;
    </select>

    <!-- 공지사항 삽입 -->
    <insert id="insert_notice">
        INSERT INTO `notice` (no, title, content, created_date, views)
        VALUES(#{no}, #{title}, #{content}, #{createdDate}, #{views})
    </insert>

    <!-- 조회수 증가 -->
    <update id="update_view">
        UPDATE `notice`
        SET views = views + 1
        WHERE no = #{no}
    </update>

    <update id="update_notice">
        UPDATE `notice`
        SET title = #{title},
            content = #{content}
        WHERE no = #{no}
    </update>

    <delete id="delete_notice" parameterType="int">
        DELETE FROM `notice`
        WHERE no = #{noticeNo}
    </delete>

</mapper>